# context from this file (optional, default: '.')
context = '.'

# default task group to execute (optional)
default = 'foo'

{
    # task groups (at least one)
    'foo': {
        'dependencies': ['bar'],
        'tasks': [{
            'run': command(['ls']),
        }, {
            'run': command(['ls', '-l']),
        }, {
            'run': copy(path('a', 'b'), path('c', 'd')),
        }],
    },

    'bar': {
        'tasks': [{
            'run': command(['ls'])
        }],
    },

    'simple': {
        'tasks': [
            command('ls -l'),
            copy(path('a', 'b'), path('c', 'd')),
            remove(path('a', 'b'), path('c', 'd')),
        ],
    },

    'shorten': [
        command('ls -l'),
        {
            'run': command('ls -l'),
        },
    ],

    'pipe': [{
        'run': command('echo foo'),
        'stdout': 'PIPE_OUTPUT',
    }, {
        'run': command('cat'),
        'input': 'PIPE_OUTPUT',
    }],

    'pipe2': {
        'dependencies': ['pipe'],
        'tasks': [{
            'run': command('echo', inputs_as_args=True),
            'input': ('pipe', 'PIPE_OUTPUT'),
        }, {
            'run': save_input_to(path('output/logs/pipe.log')),
            'conditional_on': condition.HAS_INPUT,
            'input': ('pipe', 'PIPE_OUTPUT'),
        }, {
            'run': command('do some'),
            # multi lines as single value
            'input': as_single_value('pipe', 'PIPE_OUTPUT'),
        }, {
            'run': command('do some'),
            # multi inputs
            'input': [('pipe', 'PIPE_OUTPUT'), as_single_value('pipe', 'PIPE_OUTPUT')]
        }],
    },

    'command_args': [
        command([path('./some.sh'), 'a', 'b'],
                cwd=path('./x/y'),
                inputs_as_args=True,
                env={
                    'MY_ENV1': 'foo',
                    'MY_ENV2': env('BAR'),
                    'MY_ENV3': arg('ARG3'),
                }),
    ],

    'task_attributes': [{
        'conditional_on': command('test condition'),
        'run': command('false'),
        'ignore_failure': True,
    }, {
        'conditional_on': condition.HAS_INPUT,
        'run': command('do some'),
        'input': ('pipe', 'PIPE_OUTPUT'),
    }, {
        'conditional_on': condition.expression('1 == 1'),
        'run': command('do some'),
    }, {
        'conditional_on': condition.expression('1 == ' + arg('FOO')),
        'run': command('do some'),
    }, {
        'run': command('do some'),
        'conditional_on': condition.all(
            command('test 1'),
            command('test 2')),
    }, {
        'run': command('do some'),
        'conditional_on': condition.any(
            command('test 1'),
            command('test 2')),
    }, {
        'run': command('do some'),
        'input': ('pipe', 'PIPE_OUTPUT'),
        'conditional_on': condition.all(
            condition.HAS_INPUT,
            condition.any(
                command('test 1'),
                command('test 2'))),
    }, {
        'run': command('do some'),
        'input': ('pipe', 'PIPE_OUTPUT'),
        'conditional_on': condition.fail(command('test 1')),
    }, {
        'run': command('do some'),
        # platform conditions: LINUX, WIN, MAC
        'conditional_on': condition.WIN,
    }, {
        'run': command('do some'),
        # accepts raw boolean expression
        'conditional_on': True,
    }, {
        'run': command('do some'),
        # `all`, `any`, and `fail` are also accept boolean expression
        'conditional_on': condition.all(True, True),
    }],

    'task_group_attributes': {
        'allow_skip': False,
        'tasks': [
            command('run always'),
        ],
    },

    'args': [{
        'run': command(['echo',
                        env('ENV1'),
                        env('ENV2', default='foo'),
                        env('ENV3', allow_empty=True),
                        ]),
    }, {
        'run': command(['echo',
                        arg('ARG1'),
                        arg('ARG2', default='bar'),
                        arg('ARG3', allow_empty=True),
                        ]),
    }],
}
